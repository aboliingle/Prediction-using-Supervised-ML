# -*- coding: utf-8 -*-
"""prediction of study hours.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Pm3osfTwkU9Jk-e3r-sKBurov4qpaB0

# ***THE SPARK FOUNDATION.***

# ***Task 1 Predict the percentage of an student based on the no. of study hours.*** 

Aim:-
● Create a simple linear regression task as it involves just 2 variables. 
● You can use R, Python, SAS Enterprise Miner or any other tool 
● Data can be found at http://bit.ly/w-data 
● What will be predicted score if a student studies for 9.25 hrs/ day?

# ***Created By: Aboli Ingle.***

# ***Import libraries***
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn
from sklearn import linear_model

"""# ***Import dataframe***"""

df = pd.read_csv('https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv')
print(df)

# Plotting the distribution of scores
df.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""# ***Exploratory Data Analysis***"""

df.shape

df.columns

df.head()

df.tail()

df.describe()

df.isnull().sum()

X = df['Hours']
X=np.array(X).reshape(-1, 1) 
print(X)
y = df['Scores']
y=np.array(y).reshape(-1, 1)
print(y)

"""# ***Training the Algorithm***"""

from sklearn.linear_model import LinearRegression
regressor = linear_model.LinearRegression()

reg = LinearRegression().fit(X, y)

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 

print('Training Competed of dataframe')

reg.coef_

reg.intercept_

# Plotting the regression line
line = reg.coef_*X+reg.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""# ***Making Predictions***"""

print(X_test) # Testing data - In Hours
y_pred = reg.predict(X_test) # Predicting the scores

y_test.shape
print(y_test)

df_result = pd.DataFrame()
df_result['Test Data'] = y_test.ravel()
df_result['Pred Date'] = y_pred.ravel()
df_result

reg.score(X_test,y_test)

# You can also test with any hours data

hours = [[9.25]]

own_pred = reg.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""# ***Evaluating the model***
The final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics.
"""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))